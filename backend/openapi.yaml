openapi: 3.0.3
info:
  title: Forever E-commerce API
  description: |
    Complete API documentation for the Forever e-commerce backend.
    This API provides endpoints for user authentication, product management, cart operations, and order processing.
    All orders are processed using Cash on Delivery (COD) payment method.
  version: 1.0.0
  contact:
    name: Forever E-commerce Team
    email: support@forever-ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.forever-ecommerce.com
    description: Production server

paths:
  # Health Check
  /:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Simple health check to verify API is running
      responses:
        '200':
          description: API is working
          content:
            text/plain:
              schema:
                type: string
                example: "API WORKING"

  # User Authentication
  /api/user/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with name, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/admin:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Authenticate admin user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      responses:
        '200':
          description: Admin logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid admin credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Management
  /api/product/add:
    post:
      tags:
        - Products
      summary: Add a new product
      description: Add a new product to the catalog (Admin only)
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductAdd'
      responses:
        '200':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/product/list:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products in the catalog
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/product/single:
    get:
      tags:
        - Products
      summary: Get single product
      description: Retrieve details of a single product by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: MongoDB ObjectId of the product
                  example: "507f1f77bcf86cd799439011"
              required:
                - productId
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - product ID required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/product/remove:
    post:
      tags:
        - Products
      summary: Remove a product
      description: Remove a product from the catalog (Admin only)
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: MongoDB ObjectId of the product to remove
                  example: "507f1f77bcf86cd799439011"
              required:
                - id
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - product ID required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Cart Management
  /api/cart/add:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product with specific size to user's cart
      security:
        - UserAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartAdd'
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - item ID and size required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cart/update:
    post:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific item in user's cart
      security:
        - UserAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - item ID, size, and quantity required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cart/get:
    get:
      tags:
        - Cart
      summary: Get user cart
      description: Retrieve all items in user's cart
      security:
        - UserAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  cartData:
                    $ref: '#/components/schemas/CartData'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order Management
  /api/order/place:
    post:
      tags:
        - Orders
      summary: Place a new order (COD)
      description: Place a new order using Cash on Delivery payment method
      security:
        - UserAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPlace'
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Order Placed"
                  orderId:
                    type: string
                    example: "507f1f77bcf86cd799439011"
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/order/userorders:
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve all orders placed by the authenticated user
      security:
        - UserAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/order/list:
    get:
      tags:
        - Orders
      summary: Get all orders (Admin)
      description: Retrieve all orders in the system (Admin only)
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/order/status:
    post:
      tags:
        - Orders
      summary: Update order status (Admin)
      description: Update the status of an order (Admin only)
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - order ID and status required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for admin authentication

  schemas:
    # Authentication Schemas
    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 100
          example: "securePassword123"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "securePassword123"

    AdminLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@forever.com"
        password:
          type: string
          example: "adminPassword123"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # Product Schemas
    ProductAdd:
      type: object
      required:
        - name
        - description
        - price
        - category
        - subCategory
        - sizes
        - image1
      properties:
        name:
          type: string
          example: "Men's Cotton T-Shirt"
        description:
          type: string
          example: "Comfortable cotton t-shirt perfect for casual wear"
        price:
          type: number
          format: float
          minimum: 0
          example: 29.99
        category:
          type: string
          enum: ["Men", "Women", "Kids"]
          example: "Men"
        subCategory:
          type: string
          enum: ["Topwear", "Bottomwear", "Winterwear"]
          example: "Topwear"
        sizes:
          type: string
          description: JSON string array of available sizes
          example: '["S", "M", "L", "XL"]'
        bestseller:
          type: string
          enum: ["true", "false"]
          default: "false"
          example: "false"
        image1:
          type: string
          format: binary
          description: Primary product image
        image2:
          type: string
          format: binary
          description: Secondary product image (optional)
        image3:
          type: string
          format: binary
          description: Third product image (optional)
        image4:
          type: string
          format: binary
          description: Fourth product image (optional)

    Product:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Men's Cotton T-Shirt"
        description:
          type: string
          example: "Comfortable cotton t-shirt perfect for casual wear"
        price:
          type: number
          format: float
          example: 29.99
        image:
          type: array
          items:
            type: string
          example: ["https://cloudinary.com/image1.jpg", "https://cloudinary.com/image2.jpg"]
        category:
          type: string
          example: "Men"
        subCategory:
          type: string
          example: "Topwear"
        sizes:
          type: array
          items:
            type: string
          example: ["S", "M", "L", "XL"]
        bestseller:
          type: boolean
          example: false
        date:
          type: number
          description: Timestamp when product was created
          example: 1640995200000
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    # Cart Schemas
    CartAdd:
      type: object
      required:
        - itemId
        - size
      properties:
        itemId:
          type: string
          description: MongoDB ObjectId of the product
          example: "507f1f77bcf86cd799439011"
        size:
          type: string
          example: "M"

    CartUpdate:
      type: object
      required:
        - itemId
        - size
        - quantity
      properties:
        itemId:
          type: string
          description: MongoDB ObjectId of the product
          example: "507f1f77bcf86cd799439011"
        size:
          type: string
          example: "M"
        quantity:
          type: integer
          minimum: 0
          example: 2

    CartData:
      type: object
      description: User's cart data with nested structure
      example:
        "507f1f77bcf86cd799439011":
          "M": 2
          "L": 1
        "507f1f77bcf86cd799439012":
          "S": 3

    # Order Schemas
    OrderPlace:
      type: object
      required:
        - items
        - amount
        - address
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        amount:
          type: number
          format: float
          minimum: 0
          description: Total order amount including delivery charges
          example: 89.97
        address:
          $ref: '#/components/schemas/Address'

    OrderItem:
      type: object
      required:
        - _id
        - name
        - price
        - quantity
        - size
      properties:
        _id:
          type: string
          description: MongoDB ObjectId of the product
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Men's Cotton T-Shirt"
        price:
          type: number
          format: float
          example: 29.99
        quantity:
          type: integer
          minimum: 1
          example: 2
        size:
          type: string
          example: "M"
        image:
          type: array
          items:
            type: string
          example: ["https://cloudinary.com/image1.jpg"]

    Address:
      type: object
      required:
        - firstName
        - lastName
        - email
        - street
        - city
        - state
        - zipcode
        - country
        - phone
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        street:
          type: string
          example: "123 Main Street"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zipcode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"
        phone:
          type: string
          example: "+1-555-123-4567"

    Order:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          example: "507f1f77bcf86cd799439010"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        amount:
          type: number
          format: float
          example: 89.97
        address:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          enum: ["Order Placed", "Packing", "Shipped", "Out for delivery", "Delivered"]
          default: "Order Placed"
          example: "Order Placed"
        paymentMethod:
          type: string
          enum: ["COD"]
          example: "COD"
        payment:
          type: boolean
          description: Payment status - always false for COD
          example: false
        date:
          type: number
          description: Timestamp when order was placed
          example: 1640995200000

    OrderStatusUpdate:
      type: object
      required:
        - orderId
        - status
      properties:
        orderId:
          type: string
          description: MongoDB ObjectId of the order
          example: "507f1f77bcf86cd799439011"
        status:
          type: string
          enum: ["Order Placed", "Packing", "Shipped", "Out for delivery", "Delivered"]
          example: "Shipped"

    # Response Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error description"

tags:
  - name: Health
    description: API health check endpoints
  - name: Authentication
    description: User and admin authentication endpoints
  - name: Products
    description: Product management endpoints
  - name: Cart
    description: Shopping cart management endpoints
  - name: Orders
    description: Order management endpoints

externalDocs:
  description: Find out more about Forever E-commerce
  url: https://github.com/forever-ecommerce/api-docs